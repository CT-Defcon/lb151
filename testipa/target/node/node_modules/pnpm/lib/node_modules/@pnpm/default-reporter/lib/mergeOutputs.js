"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const Rx = __importStar(require("rxjs"));
const operators_1 = require("rxjs/operators");
function mergeOutputs(outputs) {
    let blockNo = 0;
    let fixedBlockNo = 0;
    let started = false;
    let previousOuput = null;
    return Rx.merge(...outputs).pipe(operators_1.map((log) => {
        let currentBlockNo = -1;
        let currentFixedBlockNo = -1;
        return log.pipe(operators_1.map((msg) => {
            if (msg['fixed']) {
                if (currentFixedBlockNo === -1) {
                    currentFixedBlockNo = fixedBlockNo++;
                }
                return {
                    blockNo: currentFixedBlockNo,
                    fixed: true,
                    msg: msg.msg,
                };
            }
            if (currentBlockNo === -1) {
                currentBlockNo = blockNo++;
            }
            return {
                blockNo: currentBlockNo,
                fixed: false,
                msg: typeof msg === 'string' ? msg : msg.msg,
                prevFixedBlockNo: currentFixedBlockNo,
            };
        }));
    }), operators_1.mergeAll(), operators_1.scan((acc, log) => {
        if (log.fixed) {
            acc.fixedBlocks[log.blockNo] = log.msg;
        }
        else {
            delete acc.fixedBlocks[log['prevFixedBlockNo']];
            acc.blocks[log.blockNo] = log.msg;
        }
        return acc;
    }, { fixedBlocks: [], blocks: [] }), operators_1.map((sections) => {
        const fixedBlocks = sections.fixedBlocks.filter(Boolean);
        const nonFixedPart = sections.blocks.filter(Boolean).join(constants_1.EOL);
        if (!fixedBlocks.length) {
            return nonFixedPart;
        }
        const fixedPart = fixedBlocks.join(constants_1.EOL);
        if (!nonFixedPart) {
            return fixedPart;
        }
        return `${nonFixedPart}${constants_1.EOL}${fixedPart}`;
    }), operators_1.filter((msg) => {
        if (started) {
            return true;
        }
        if (msg === '')
            return false;
        started = true;
        return true;
    }), operators_1.filter((msg) => {
        if (msg !== previousOuput) {
            previousOuput = msg;
            return true;
        }
        return false;
    }));
}
exports.default = mergeOutputs;
//# sourceMappingURL=mergeOutputs.js.map