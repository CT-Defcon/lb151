"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.help = exports.commandNames = exports.cliOptionsTypes = exports.rcOptionsTypes = void 0;
const cli_utils_1 = require("@pnpm/cli-utils");
const common_cli_options_help_1 = require("@pnpm/common-cli-options-help");
const config_1 = require("@pnpm/config");
const find_workspace_dir_1 = __importDefault(require("@pnpm/find-workspace-dir"));
const find_workspace_packages_1 = __importStar(require("@pnpm/find-workspace-packages"));
const global_bin_dir_1 = __importDefault(require("@pnpm/global-bin-dir"));
const store_connection_manager_1 = require("@pnpm/store-connection-manager");
const supi_1 = require("supi");
const getSaveType_1 = __importDefault(require("./getSaveType"));
const installCommand = __importStar(require("./install"));
const path = require("path");
const pLimit = require("p-limit");
const pathAbsolute = require("path-absolute");
const R = require("ramda");
const renderHelp = require("render-help");
const installLimit = pLimit(4);
exports.rcOptionsTypes = cliOptionsTypes;
function cliOptionsTypes() {
    return R.pick([
        'global-dir',
        'global',
        'only',
        'package-import-method',
        'production',
        'registry',
        'reporter',
        'save-dev',
        'save-exact',
        'save-optional',
        'unsafe-perm',
    ], config_1.types);
}
exports.cliOptionsTypes = cliOptionsTypes;
exports.commandNames = ['link', 'ln'];
function help() {
    return renderHelp({
        aliases: ['ln'],
        descriptionLists: [
            {
                title: 'Options',
                list: [
                    ...common_cli_options_help_1.UNIVERSAL_OPTIONS,
                ],
            },
        ],
        url: cli_utils_1.docsUrl('link'),
        usages: [
            'pnpm link (in package dir)',
            'pnpm link <pkg>',
            'pnpm link <dir>',
        ],
    });
}
exports.help = help;
async function handler(opts, params) {
    var _a;
    const cwd = (_a = opts === null || opts === void 0 ? void 0 : opts.dir) !== null && _a !== void 0 ? _a : process.cwd();
    const storeControllerCache = new Map();
    let workspacePackagesArr;
    let workspacePackages;
    if (opts.workspaceDir) {
        workspacePackagesArr = await find_workspace_packages_1.default(opts.workspaceDir, opts);
        workspacePackages = find_workspace_packages_1.arrayOfWorkspacePackagesToMap(workspacePackagesArr);
    }
    else {
        workspacePackages = {};
    }
    const store = await store_connection_manager_1.createOrConnectStoreControllerCached(storeControllerCache, opts);
    const linkOpts = Object.assign(opts, {
        storeController: store.ctrl,
        storeDir: store.dir,
        targetDependenciesField: getSaveType_1.default(opts),
        workspacePackages,
    });
    // pnpm link
    if (!params || !params.length) {
        const { manifest, writeProjectManifest } = await cli_utils_1.tryReadProjectManifest(opts.globalDir, opts);
        const newManifest = await supi_1.linkToGlobal(cwd, {
            ...linkOpts,
            // A temporary workaround. global bin/prefix are always defined when --global is set
            globalBin: global_bin_dir_1.default([linkOpts.npmGlobalBinDir]),
            globalDir: linkOpts.globalDir,
            manifest: manifest !== null && manifest !== void 0 ? manifest : {},
        });
        await writeProjectManifest(newManifest);
        return;
    }
    const [pkgPaths, pkgNames] = R.partition((inp) => inp.startsWith('.'), params);
    if (pkgNames.length) {
        let globalPkgNames;
        if (opts.workspaceDir) {
            workspacePackagesArr = await find_workspace_packages_1.default(opts.workspaceDir, opts);
            const pkgsFoundInWorkspace = workspacePackagesArr
                .filter(({ manifest }) => manifest.name && pkgNames.includes(manifest.name));
            pkgsFoundInWorkspace.forEach((pkgFromWorkspace) => pkgPaths.push(pkgFromWorkspace.dir));
            if (pkgsFoundInWorkspace.length && !linkOpts.targetDependenciesField) {
                linkOpts.targetDependenciesField = 'dependencies';
            }
            globalPkgNames = pkgNames.filter((pkgName) => !pkgsFoundInWorkspace.some((pkgFromWorkspace) => pkgFromWorkspace.manifest.name === pkgName));
        }
        else {
            globalPkgNames = pkgNames;
        }
        const globalPkgPath = pathAbsolute(opts.globalDir);
        globalPkgNames.forEach((pkgName) => pkgPaths.push(path.join(globalPkgPath, 'node_modules', pkgName)));
    }
    await Promise.all(pkgPaths.map((dir) => installLimit(async () => {
        const s = await store_connection_manager_1.createOrConnectStoreControllerCached(storeControllerCache, opts);
        const config = await cli_utils_1.getConfig({ ...opts.cliOptions, dir: dir }, {
            excludeReporter: true,
            rcOptionsTypes: installCommand.rcOptionsTypes(),
            workspaceDir: await find_workspace_dir_1.default(dir),
        });
        await supi_1.install(await cli_utils_1.readProjectManifestOnly(dir, opts), {
            ...config,
            include: {
                dependencies: config.production !== false,
                devDependencies: config.dev !== false,
                optionalDependencies: config.optional !== false,
            },
            storeController: s.ctrl,
            storeDir: s.dir,
            workspacePackages,
        });
    })));
    const { manifest, writeProjectManifest } = await cli_utils_1.readProjectManifest(cwd, opts);
    const newManifest = await supi_1.link(pkgPaths, path.join(cwd, 'node_modules'), {
        ...linkOpts,
        manifest,
    });
    await writeProjectManifest(newManifest);
    await Promise.all(Array.from(storeControllerCache.values())
        .map(async (storeControllerPromise) => {
        const storeControllerHolder = await storeControllerPromise;
        await storeControllerHolder.ctrl.close();
    }));
}
exports.handler = handler;
//# sourceMappingURL=link.js.map