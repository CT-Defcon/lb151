"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilePathInCafs = exports.getFilePathByModeInCafs = exports.checkFilesIntegrity = void 0;
const addFilesFromDir_1 = __importDefault(require("./addFilesFromDir"));
const addFilesFromTarball_1 = __importDefault(require("./addFilesFromTarball"));
const checkFilesIntegrity_1 = __importStar(require("./checkFilesIntegrity"));
exports.checkFilesIntegrity = checkFilesIntegrity_1.default;
const getFilePathInCafs_1 = __importStar(require("./getFilePathInCafs"));
exports.getFilePathInCafs = getFilePathInCafs_1.default;
Object.defineProperty(exports, "getFilePathByModeInCafs", { enumerable: true, get: function () { return getFilePathInCafs_1.getFilePathByModeInCafs; } });
const writeFile_1 = __importDefault(require("./writeFile"));
const fs = require("mz/fs");
const path = require("path");
const getStream = require("get-stream");
const pathTemp = require("path-temp");
const renameOverwrite = require("rename-overwrite");
const ssri = require("ssri");
function createCafs(cafsDir, ignore) {
    const locker = new Map();
    const _writeBufferToCafs = writeBufferToCafs.bind(null, locker, cafsDir);
    const addStream = addStreamToCafs.bind(null, _writeBufferToCafs);
    const addBuffer = addBufferToCafs.bind(null, _writeBufferToCafs);
    return {
        addFilesFromDir: addFilesFromDir_1.default.bind(null, { addBuffer, addStream }),
        addFilesFromTarball: addFilesFromTarball_1.default.bind(null, addStream, ignore !== null && ignore !== void 0 ? ignore : null),
    };
}
exports.default = createCafs;
async function addStreamToCafs(writeBufferToCafs, fileStream, mode) {
    const buffer = await getStream.buffer(fileStream);
    return addBufferToCafs(writeBufferToCafs, buffer, mode);
}
async function addBufferToCafs(writeBufferToCafs, buffer, mode) {
    const integrity = ssri.fromData(buffer);
    const isExecutable = getFilePathInCafs_1.modeIsExecutable(mode);
    const fileDest = getFilePathInCafs_1.contentPathFromHex(isExecutable ? 'exec' : 'nonexec', integrity.hexDigest());
    const checkedAt = await writeBufferToCafs(buffer, fileDest, isExecutable ? 0o755 : undefined, integrity);
    return { checkedAt, integrity };
}
async function writeBufferToCafs(locker, cafsDir, buffer, fileDest, mode, integrity) {
    fileDest = path.join(cafsDir, fileDest);
    if (locker.has(fileDest)) {
        return locker.get(fileDest);
    }
    const p = (async () => {
        // This part is a bit redundant.
        // When a file is already used by another package,
        // we probably have validated its content already.
        // However, there is no way to find which package index file references
        // the given file. So we should revalidate the content of the file again.
        if (await existsSame(fileDest, integrity)) {
            return Date.now();
        }
        // This might be too cautious.
        // The write is atomic, so in case pnpm crashes, no broken file
        // will be added to the store.
        // It might be a redundant step though, as we verify the contents of the
        // files before linking
        //
        // If we don't allow --no-verify-store-integrity then we probably can write
        // to the final file directly.
        const temp = pathTemp(path.dirname(fileDest));
        await writeFile_1.default(temp, buffer, mode);
        // Unfortunately, "birth time" (time of file creation) is available not on all filesystems.
        // We log the creation time ourselves and save it in the package index file.
        // Having this information allows us to skip content checks for files that were not modified since "birth time".
        const birthtimeMs = Date.now();
        await renameOverwrite(temp, fileDest);
        return birthtimeMs;
    })();
    locker.set(fileDest, p);
    return p;
}
async function existsSame(filename, integrity) {
    let existingFile;
    try {
        existingFile = await fs.stat(filename);
    }
    catch (err) {
        return false;
    }
    return checkFilesIntegrity_1.verifyFileIntegrity(filename, {
        size: existingFile.size,
        integrity,
    });
}
//# sourceMappingURL=index.js.map