"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cafs_1 = require("@pnpm/cafs");
const get_context_1 = require("@pnpm/get-context");
const lockfile_utils_1 = require("@pnpm/lockfile-utils");
const logger_1 = require("@pnpm/logger");
const pkgid_to_filename_1 = __importDefault(require("@pnpm/pkgid-to-filename"));
const dp = __importStar(require("dependency-path"));
const extendStoreStatusOptions_1 = __importDefault(require("./extendStoreStatusOptions"));
const path = require("path");
const dint = require("dint");
const loadJsonFile = require("load-json-file");
const pFilter = require("p-filter");
async function default_1(maybeOpts) {
    var _a;
    const reporter = maybeOpts === null || maybeOpts === void 0 ? void 0 : maybeOpts.reporter;
    if (reporter && typeof reporter === 'function') {
        logger_1.streamParser.on('data', reporter);
    }
    const opts = await extendStoreStatusOptions_1.default(maybeOpts);
    const { registries, storeDir, skipped, virtualStoreDir, wantedLockfile, } = await get_context_1.getContextForSingleImporter({}, {
        ...opts,
        extraBinPaths: [],
    });
    if (!wantedLockfile)
        return [];
    const pkgs = Object.keys((_a = wantedLockfile.packages) !== null && _a !== void 0 ? _a : {})
        .filter((depPath) => !skipped.has(depPath))
        .map((depPath) => {
        const pkg = wantedLockfile.packages[depPath];
        return {
            depPath,
            integrity: pkg.resolution['integrity'],
            pkgPath: dp.resolve(registries, depPath),
            ...lockfile_utils_1.nameVerFromPkgSnapshot(depPath, pkg),
        };
    });
    const cafsDir = path.join(storeDir, 'files');
    const modified = await pFilter(pkgs, async ({ integrity, pkgPath, depPath, name }) => {
        const pkgIndexFilePath = integrity
            ? cafs_1.getFilePathInCafs(cafsDir, integrity, 'index')
            : path.join(storeDir, pkgPath, 'integrity.json');
        const { files } = await loadJsonFile(pkgIndexFilePath);
        return (await dint.check(path.join(virtualStoreDir, pkgid_to_filename_1.default(depPath, opts.dir), 'node_modules', name), files)) === false;
    });
    if (reporter && typeof reporter === 'function') {
        logger_1.streamParser.removeListener('data', reporter);
    }
    return modified.map(({ pkgPath }) => pkgPath);
}
exports.default = default_1;
//# sourceMappingURL=index.js.map