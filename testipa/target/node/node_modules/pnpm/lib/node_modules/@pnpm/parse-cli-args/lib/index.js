"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("@pnpm/error"));
const find_workspace_dir_1 = __importDefault(require("@pnpm/find-workspace-dir"));
const didyoumean2_1 = __importStar(require("didyoumean2"));
const nopt = require("nopt");
const RECURSIVE_CMDS = new Set(['recursive', 'multi', 'm']);
async function parseCliArgs(opts, inputArgv) {
    var _a;
    const noptExploratoryResults = nopt({
        filter: [String],
        help: Boolean,
        recursive: Boolean,
        ...opts.universalOptionsTypes,
        ...opts.getTypesByCommandName('add'),
        ...opts.getTypesByCommandName('install'),
    }, {
        r: '--recursive',
        ...opts.universalShorthands,
    }, inputArgv, 0);
    if (noptExploratoryResults['help']) {
        return {
            argv: noptExploratoryResults.argv,
            cmd: 'help',
            options: {},
            params: noptExploratoryResults.argv.remain,
            unknownOptions: new Map(),
        };
    }
    const recursiveCommandUsed = RECURSIVE_CMDS.has(noptExploratoryResults.argv.remain[0]);
    let commandName = getCommandName(noptExploratoryResults.argv.remain);
    let cmd = commandName ? opts.getCommandLongName(commandName) : null;
    if (commandName && !cmd && opts.fallbackCommand) {
        cmd = opts.fallbackCommand;
        commandName = opts.fallbackCommand;
        inputArgv.unshift(opts.fallbackCommand);
    }
    const types = {
        ...opts.universalOptionsTypes,
        ...opts.getTypesByCommandName(commandName),
    }; // eslint-disable-line @typescript-eslint/no-explicit-any
    function getCommandName(args) {
        if (recursiveCommandUsed) {
            args = args.slice(1);
        }
        if (opts.getCommandLongName(args[0]) !== 'install' || args.length === 1) {
            return args[0];
        }
        return 'add';
    }
    const { argv, ...options } = nopt({
        recursive: Boolean,
        ...types,
    }, {
        ...opts.universalShorthands,
        ...opts.shorthandsByCommandName[commandName],
    }, inputArgv, 0);
    if (opts.renamedOptions) {
        for (const cliOption of Object.keys(options)) {
            if (opts.renamedOptions[cliOption]) {
                options[opts.renamedOptions[cliOption]] = options[cliOption];
                delete options[cliOption];
            }
        }
    }
    // `pnpm install ""` is going to be just `pnpm install`
    const params = argv.remain.slice(1).filter(Boolean);
    if (options['recursive'] !== true && (options['filter'] || recursiveCommandUsed)) {
        options['recursive'] = true;
        const subCmd = argv.remain[1] && opts.getCommandLongName(argv.remain[1]);
        if (subCmd && recursiveCommandUsed) {
            params.shift();
            argv.remain.shift();
            cmd = subCmd;
        }
    }
    const dir = (_a = options['dir']) !== null && _a !== void 0 ? _a : process.cwd();
    const workspaceDir = options['global'] // eslint-disable-line
        ? undefined
        : await find_workspace_dir_1.default(dir);
    if (options['workspace-root']) {
        if (options['global']) {
            throw new error_1.default('OPTIONS_CONFLICT', '--workspace-root may not be used with --global');
        }
        if (!workspaceDir) {
            throw new error_1.default('NOT_IN_WORKSPACE', '--workspace-root may only be used inside a workspace');
        }
        options['dir'] = workspaceDir;
    }
    if (cmd === 'install' && params.length > 0) {
        cmd = 'add';
    }
    if (!cmd && options['recursive']) {
        cmd = 'recursive';
    }
    const knownOptions = new Set(Object.keys(types));
    return {
        argv,
        cmd,
        params,
        workspaceDir,
        ...normalizeOptions(options, knownOptions),
    };
}
exports.default = parseCliArgs;
const CUSTOM_OPTION_PREFIX = 'config.';
function normalizeOptions(options, knownOptions) {
    const standardOptionNames = [];
    const normalizedOptions = {};
    for (const [optionName, optionValue] of Object.entries(options)) {
        if (optionName.startsWith(CUSTOM_OPTION_PREFIX)) {
            normalizedOptions[optionName.substring(CUSTOM_OPTION_PREFIX.length)] = optionValue;
            continue;
        }
        normalizedOptions[optionName] = optionValue;
        standardOptionNames.push(optionName);
    }
    const unknownOptions = getUnknownOptions(standardOptionNames, knownOptions);
    return { options: normalizedOptions, unknownOptions };
}
function getUnknownOptions(usedOptions, knownOptions) {
    const unknownOptions = new Map();
    const closestMatches = getClosestOptionMatches.bind(null, Array.from(knownOptions));
    for (const usedOption of usedOptions) {
        if (knownOptions.has(usedOption) || usedOption.startsWith('//'))
            continue;
        unknownOptions.set(usedOption, closestMatches(usedOption));
    }
    return unknownOptions;
}
function getClosestOptionMatches(knownOptions, option) {
    return didyoumean2_1.default(option, knownOptions, {
        returnType: didyoumean2_1.ReturnTypeEnums.ALL_CLOSEST_MATCHES,
    });
}
//# sourceMappingURL=index.js.map