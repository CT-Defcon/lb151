"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toOutput$ = void 0;
const Rx = __importStar(require("rxjs"));
const operators_1 = require("rxjs/operators");
const constants_1 = require("./constants");
const mergeOutputs_1 = __importDefault(require("./mergeOutputs"));
const reporterForClient_1 = __importDefault(require("./reporterForClient"));
const reporterForServer_1 = __importDefault(require("./reporterForServer"));
const createDiffer = require("ansi-diff");
function default_1(opts) {
    var _a, _b, _c, _d;
    if (opts.context.argv[0] === 'server') {
        // eslint-disable-next-line
        const log$ = Rx.fromEvent(opts.streamParser, 'data');
        reporterForServer_1.default(log$, opts.context.config);
        return;
    }
    const outputMaxWidth = (_c = (_b = (_a = opts.reportingOptions) === null || _a === void 0 ? void 0 : _a.outputMaxWidth) !== null && _b !== void 0 ? _b : (process.stdout.columns && process.stdout.columns - 2)) !== null && _c !== void 0 ? _c : 80;
    const output$ = toOutput$({ ...opts, reportingOptions: { ...opts.reportingOptions, outputMaxWidth } });
    if ((_d = opts.reportingOptions) === null || _d === void 0 ? void 0 : _d.appendOnly) {
        output$
            .subscribe({
            complete() { },
            error: (err) => console.error(err.message),
            next: (line) => console.log(line),
        });
        return;
    }
    const diff = createDiffer({
        height: process.stdout.rows,
        outputMaxWidth,
    });
    output$
        .subscribe({
        complete() { },
        error: (err) => logUpdate(err.message),
        next: logUpdate,
    });
    function logUpdate(view) {
        // A new line should always be appended in case a prompt needs to appear.
        // Without a new line the prompt will be joined with the previous output.
        // An example of such prompt may be seen by running: pnpm update --interactive
        if (!view.endsWith(constants_1.EOL))
            view += constants_1.EOL;
        process.stdout.write(diff.update(view));
    }
}
exports.default = default_1;
function toOutput$(opts) {
    var _a, _b, _c, _d, _e, _f, _g;
    opts = opts || {};
    const contextPushStream = new Rx.Subject();
    const fetchingProgressPushStream = new Rx.Subject();
    const progressPushStream = new Rx.Subject();
    const stagePushStream = new Rx.Subject();
    const deprecationPushStream = new Rx.Subject();
    const summaryPushStream = new Rx.Subject();
    const lifecyclePushStream = new Rx.Subject();
    const statsPushStream = new Rx.Subject();
    const packageImportMethodPushStream = new Rx.Subject();
    const installCheckPushStream = new Rx.Subject();
    const registryPushStream = new Rx.Subject();
    const rootPushStream = new Rx.Subject();
    const packageManifestPushStream = new Rx.Subject();
    const linkPushStream = new Rx.Subject();
    const otherPushStream = new Rx.Subject();
    const hookPushStream = new Rx.Subject();
    const skippedOptionalDependencyPushStream = new Rx.Subject();
    const scopePushStream = new Rx.Subject();
    const requestRetryPushStream = new Rx.Subject();
    setTimeout(() => {
        opts.streamParser['on']('data', (log) => {
            switch (log.name) {
                case 'pnpm:context':
                    contextPushStream.next(log);
                    break;
                case 'pnpm:fetching-progress':
                    fetchingProgressPushStream.next(log);
                    break;
                case 'pnpm:progress':
                    progressPushStream.next(log);
                    break;
                case 'pnpm:stage':
                    stagePushStream.next(log);
                    break;
                case 'pnpm:deprecation':
                    deprecationPushStream.next(log);
                    break;
                case 'pnpm:summary':
                    summaryPushStream.next(log);
                    break;
                case 'pnpm:lifecycle':
                    lifecyclePushStream.next(log);
                    break;
                case 'pnpm:stats':
                    statsPushStream.next(log);
                    break;
                case 'pnpm:package-import-method':
                    packageImportMethodPushStream.next(log);
                    break;
                case 'pnpm:install-check':
                    installCheckPushStream.next(log);
                    break;
                case 'pnpm:registry':
                    registryPushStream.next(log);
                    break;
                case 'pnpm:root':
                    rootPushStream.next(log);
                    break;
                case 'pnpm:package-manifest':
                    packageManifestPushStream.next(log);
                    break;
                case 'pnpm:link':
                    linkPushStream.next(log);
                    break;
                case 'pnpm:hook':
                    hookPushStream.next(log);
                    break;
                case 'pnpm:skipped-optional-dependency':
                    skippedOptionalDependencyPushStream.next(log);
                    break;
                case 'pnpm:scope':
                    scopePushStream.next(log);
                    break;
                case 'pnpm:request-retry':
                    requestRetryPushStream.next(log);
                    break;
                case 'pnpm': // eslint-disable-line
                case 'pnpm:global': // eslint-disable-line
                case 'pnpm:store': // eslint-disable-line
                case 'pnpm:lockfile': // eslint-disable-line
                    otherPushStream.next(log);
                    break;
            }
        });
    }, 0);
    const log$ = {
        context: Rx.from(contextPushStream),
        deprecation: Rx.from(deprecationPushStream),
        fetchingProgress: Rx.from(fetchingProgressPushStream),
        hook: Rx.from(hookPushStream),
        installCheck: Rx.from(installCheckPushStream),
        lifecycle: Rx.from(lifecyclePushStream),
        link: Rx.from(linkPushStream),
        other: Rx.from(otherPushStream),
        packageImportMethod: Rx.from(packageImportMethodPushStream),
        packageManifest: Rx.from(packageManifestPushStream),
        progress: Rx.from(progressPushStream),
        registry: Rx.from(registryPushStream),
        requestRetry: Rx.from(requestRetryPushStream),
        root: Rx.from(rootPushStream),
        scope: Rx.from(scopePushStream),
        skippedOptionalDependency: Rx.from(skippedOptionalDependencyPushStream),
        stage: Rx.from(stagePushStream),
        stats: Rx.from(statsPushStream),
        summary: Rx.from(summaryPushStream),
    };
    const outputs = reporterForClient_1.default(log$, {
        appendOnly: (_a = opts.reportingOptions) === null || _a === void 0 ? void 0 : _a.appendOnly,
        cmd: opts.context.argv[0],
        config: opts.context.config,
        isRecursive: ((_b = opts.context.config) === null || _b === void 0 ? void 0 : _b['recursive']) === true,
        logLevel: (_c = opts.reportingOptions) === null || _c === void 0 ? void 0 : _c.logLevel,
        pnpmConfig: opts.context.config,
        streamLifecycleOutput: (_d = opts.reportingOptions) === null || _d === void 0 ? void 0 : _d.streamLifecycleOutput,
        throttleProgress: (_e = opts.reportingOptions) === null || _e === void 0 ? void 0 : _e.throttleProgress,
        width: (_f = opts.reportingOptions) === null || _f === void 0 ? void 0 : _f.outputMaxWidth,
    });
    if ((_g = opts.reportingOptions) === null || _g === void 0 ? void 0 : _g.appendOnly) {
        return Rx.merge(...outputs)
            .pipe(operators_1.map((log) => log.pipe(operators_1.map((msg) => msg.msg))), operators_1.mergeAll());
    }
    return mergeOutputs_1.default(outputs);
}
exports.toOutput$ = toOutput$;
//# sourceMappingURL=index.js.map