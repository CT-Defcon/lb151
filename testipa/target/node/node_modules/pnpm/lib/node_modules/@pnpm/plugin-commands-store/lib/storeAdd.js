"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("@pnpm/error"));
const logger_1 = __importStar(require("@pnpm/logger"));
const parse_wanted_dependency_1 = __importDefault(require("@pnpm/parse-wanted-dependency"));
const pick_registry_for_package_1 = __importDefault(require("@pnpm/pick-registry-for-package"));
async function default_1(fuzzyDeps, opts) {
    var _a, _b;
    const reporter = opts === null || opts === void 0 ? void 0 : opts.reporter;
    if (reporter && typeof reporter === 'function') {
        logger_1.streamParser.on('data', reporter);
    }
    const deps = fuzzyDeps.map((dep) => parse_wanted_dependency_1.default(dep));
    let hasFailures = false;
    const prefix = (_a = opts.prefix) !== null && _a !== void 0 ? _a : process.cwd();
    const registries = (_b = opts.registries) !== null && _b !== void 0 ? _b : {
        default: 'https://registry.npmjs.org/',
    };
    await Promise.all(deps.map(async (dep) => {
        var _a;
        try {
            const pkgResponse = await opts.storeController.requestPackage(dep, {
                downloadPriority: 1,
                lockfileDir: prefix,
                preferredVersions: {},
                projectDir: prefix,
                registry: (_a = (dep.alias && pick_registry_for_package_1.default(registries, dep.alias))) !== null && _a !== void 0 ? _a : registries.default,
            });
            await pkgResponse.files();
            logger_1.globalInfo(`+ ${pkgResponse.body.id}`);
        }
        catch (e) {
            hasFailures = true;
            logger_1.default('store').error(e);
        }
    }));
    if (reporter && typeof reporter === 'function') {
        logger_1.streamParser.removeListener('data', reporter);
    }
    if (hasFailures) {
        throw new error_1.default('STORE_ADD_FAILURE', 'Some packages have not been added correctly');
    }
}
exports.default = default_1;
//# sourceMappingURL=storeAdd.js.map