"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = exports.handler = exports.help = exports.commandNames = exports.shorthands = exports.cliOptionsTypes = exports.rcOptionsTypes = void 0;
const cli_utils_1 = require("@pnpm/cli-utils");
const common_cli_options_help_1 = require("@pnpm/common-cli-options-help");
const config_1 = require("@pnpm/config");
const list_1 = __importStar(require("@pnpm/list"));
const recursive_1 = __importDefault(require("./recursive"));
const R = require("ramda");
const renderHelp = require("render-help");
function rcOptionsTypes() {
    return R.pick([
        'depth',
        'dev',
        'global-dir',
        'global',
        'json',
        'long',
        'only',
        'optional',
        'parseable',
        'production',
    ], config_1.types);
}
exports.rcOptionsTypes = rcOptionsTypes;
exports.cliOptionsTypes = () => ({
    ...rcOptionsTypes(),
    recursive: Boolean,
});
exports.shorthands = {
    D: '--dev',
    P: '--production',
};
exports.commandNames = ['list', 'ls'];
function help() {
    return renderHelp({
        aliases: ['list', 'ls', 'la', 'll'],
        description: 'When run as ll or la, it shows extended information by default. \
All dependencies are printed by default. Search by patterns is supported. \
For example: pnpm ls babel-* eslint-*',
        descriptionLists: [
            {
                title: 'Options',
                list: [
                    {
                        description: 'Perform command on every package in subdirectories \
or on every workspace package, when executed inside a workspace. \
For options that may be used with `-r`, see "pnpm help recursive"',
                        name: '--recursive',
                        shortAlias: '-r',
                    },
                    {
                        description: 'Show extended information',
                        name: '--long',
                    },
                    {
                        description: 'Show parseable output instead of tree view',
                        name: '--parseable',
                    },
                    {
                        description: 'Show information in JSON format',
                        name: '--json',
                    },
                    {
                        description: 'List packages in the global install prefix instead of in the current project',
                        name: '--global',
                        shortAlias: '-g',
                    },
                    {
                        description: 'Max display depth of the dependency tree',
                        name: '--depth <number>',
                    },
                    {
                        description: 'Display only direct dependencies',
                        name: '--depth 0',
                    },
                    {
                        description: 'Display only projects. Useful in a monorepo. `pnpm ls -r --depth -1` lists all projects in a monorepo',
                        name: '--depth -1',
                    },
                    {
                        description: 'Display only the dependency graph for packages in `dependencies` and `optionalDependencies`',
                        name: '--prod',
                        shortAlias: '-P',
                    },
                    {
                        description: 'Display only the dependency graph for packages in `devDependencies`',
                        name: '--dev',
                        shortAlias: '-D',
                    },
                    {
                        description: "Don't display packages from `optionalDependencies`",
                        name: '--no-optional',
                    },
                    common_cli_options_help_1.OPTIONS.globalDir,
                    ...common_cli_options_help_1.UNIVERSAL_OPTIONS,
                ],
            },
            common_cli_options_help_1.FILTERING,
        ],
        url: cli_utils_1.docsUrl('list'),
        usages: [
            'pnpm ls [<pkg> ...]',
        ],
    });
}
exports.help = help;
function handler(opts, params) {
    var _a, _b, _c;
    const include = {
        dependencies: opts.production !== false,
        devDependencies: opts.dev !== false,
        optionalDependencies: opts.optional !== false,
    };
    const depth = (_b = (_a = opts.cliOptions) === null || _a === void 0 ? void 0 : _a['depth']) !== null && _b !== void 0 ? _b : 0;
    if (opts.recursive && opts.selectedProjectsGraph) {
        const pkgs = Object.values(opts.selectedProjectsGraph).map((wsPkg) => wsPkg.package);
        return recursive_1.default(pkgs, params, { ...opts, depth, include });
    }
    return render([opts.dir], params, {
        ...opts,
        depth,
        include,
        lockfileDir: (_c = opts.lockfileDir) !== null && _c !== void 0 ? _c : opts.dir,
    });
}
exports.handler = handler;
function render(prefixes, params, opts) {
    var _a;
    const listOpts = {
        alwaysPrintRootPackage: opts.alwaysPrintRootPackage,
        depth: (_a = opts.depth) !== null && _a !== void 0 ? _a : 0,
        include: opts.include,
        lockfileDir: opts.lockfileDir,
        long: opts.long,
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        reportAs: (opts.parseable ? 'parseable' : (opts.json ? 'json' : 'tree')),
    };
    return params.length
        ? list_1.forPackages(params, prefixes, listOpts)
        : list_1.default(prefixes, listOpts);
}
exports.render = render;
//# sourceMappingURL=list.js.map