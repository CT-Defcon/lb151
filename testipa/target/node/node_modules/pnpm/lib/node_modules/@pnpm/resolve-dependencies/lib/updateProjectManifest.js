"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const manifest_utils_1 = require("@pnpm/manifest-utils");
const version_selector_type_1 = __importDefault(require("version-selector-type"));
async function updateProjectManifest(importer, opts) {
    if (!importer.manifest) {
        throw new Error('Cannot save because no package.json found');
    }
    const specsToUpsert = opts.directDependencies
        .filter((rdd, index) => importer.wantedDependencies[index].updateSpec)
        .map((rdd, index) => {
        var _a, _b;
        const wantedDep = importer.wantedDependencies[index];
        return resolvedDirectDepToSpecObject({ ...rdd, isNew: wantedDep.isNew, specRaw: wantedDep.raw }, importer, {
            pinnedVersion: (_b = (_a = wantedDep.pinnedVersion) !== null && _a !== void 0 ? _a : importer['pinnedVersion']) !== null && _b !== void 0 ? _b : 'major',
            preserveWorkspaceProtocol: opts.preserveWorkspaceProtocol,
            saveWorkspaceProtocol: opts.saveWorkspaceProtocol,
        });
    });
    for (const pkgToInstall of importer.wantedDependencies) {
        if (pkgToInstall.updateSpec && pkgToInstall.alias && !specsToUpsert.some(({ alias }) => alias === pkgToInstall.alias)) {
            specsToUpsert.push({
                alias: pkgToInstall.alias,
                peer: importer['peer'],
                saveType: importer['targetDependenciesField'],
            });
        }
    }
    const hookedManifest = await manifest_utils_1.updateProjectManifestObject(importer.rootDir, importer.manifest, specsToUpsert);
    const originalManifest = importer.originalManifest && await manifest_utils_1.updateProjectManifestObject(importer.rootDir, importer.originalManifest, specsToUpsert);
    return [hookedManifest, originalManifest];
}
exports.default = updateProjectManifest;
function resolvedDirectDepToSpecObject({ alias, isNew, name, normalizedPref, resolution, specRaw, version, }, importer, opts) {
    let pref;
    if (normalizedPref) {
        pref = normalizedPref;
    }
    else {
        if (isNew) {
            pref = getPrefPreferSpecifiedSpec({
                alias,
                name,
                pinnedVersion: opts.pinnedVersion,
                specRaw,
                version,
            });
        }
        else {
            pref = getPrefPreferSpecifiedExoticSpec({
                alias,
                name,
                pinnedVersion: opts.pinnedVersion,
                specRaw,
                version,
            });
        }
        if (resolution.type === 'directory' &&
            (opts.saveWorkspaceProtocol ||
                (opts.preserveWorkspaceProtocol && specRaw.includes('@workspace:'))) &&
            !pref.startsWith('workspace:')) {
            pref = `workspace:${pref}`;
        }
    }
    return {
        alias,
        peer: importer['peer'],
        pref,
        saveType: isNew ? importer['targetDependenciesField'] : undefined,
    };
}
function getPrefPreferSpecifiedSpec(opts) {
    var _a;
    const prefix = manifest_utils_1.getPrefix(opts.alias, opts.name);
    if ((_a = opts.specRaw) === null || _a === void 0 ? void 0 : _a.startsWith(`${opts.alias}@${prefix}`)) {
        const range = opts.specRaw.substr(`${opts.alias}@${prefix}`.length);
        if (range) {
            const selector = version_selector_type_1.default(range);
            if (selector && (selector.type === 'version' || selector.type === 'range')) {
                return opts.specRaw.substr(opts.alias.length + 1);
            }
        }
    }
    return `${prefix}${manifest_utils_1.createVersionSpec(opts.version, opts.pinnedVersion)}`;
}
function getPrefPreferSpecifiedExoticSpec(opts) {
    var _a;
    const prefix = manifest_utils_1.getPrefix(opts.alias, opts.name);
    if (((_a = opts.specRaw) === null || _a === void 0 ? void 0 : _a.startsWith(`${opts.alias}@${prefix}`)) && opts.specRaw !== `${opts.alias}@workspace:*`) {
        const specWithoutName = opts.specRaw.substr(`${opts.alias}@${prefix}`.length);
        const selector = version_selector_type_1.default(specWithoutName);
        if (!(selector && (selector.type === 'version' || selector.type === 'range'))) {
            return opts.specRaw.substr(opts.alias.length + 1);
        }
    }
    return `${prefix}${manifest_utils_1.createVersionSpec(opts.version, opts.pinnedVersion)}`;
}
//# sourceMappingURL=updateProjectManifest.js.map