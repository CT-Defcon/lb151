"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const npm_registry_agent_1 = __importDefault(require("@pnpm/npm-registry-agent"));
const fetch_1 = __importStar(require("./fetch"));
const USER_AGENT = 'pnpm'; // or maybe make it `${pkg.name}/${pkg.version} (+https://npm.im/${pkg.name})`
const CORGI_DOC = 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*';
const JSON_DOC = 'application/json';
const MAX_FOLLOWED_REDIRECTS = 20;
function default_1(defaultOpts) {
    return async (url, opts) => {
        var _a;
        const headers = {
            'user-agent': USER_AGENT,
            ...getHeaders({
                auth: opts === null || opts === void 0 ? void 0 : opts.authHeaderValue,
                fullMetadata: defaultOpts.fullMetadata,
                userAgent: defaultOpts.userAgent,
            }),
        };
        let redirects = 0;
        let urlObject = new url_1.URL(url);
        const originalHost = urlObject.host;
        while (true) {
            const agent = npm_registry_agent_1.default(urlObject.href, {
                ...defaultOpts,
                ...opts,
                strictSSL: (_a = defaultOpts.strictSSL) !== null && _a !== void 0 ? _a : true,
            }); // eslint-disable-line
            headers['connection'] = agent ? 'keep-alive' : 'close';
            // We should pass a URL object to node-fetch till this is not resolved:
            // https://github.com/bitinn/node-fetch/issues/245
            const response = await fetch_1.default(urlObject, {
                agent,
                // if verifying integrity, node-fetch must not decompress
                compress: false,
                headers,
                redirect: 'manual',
                retry: opts === null || opts === void 0 ? void 0 : opts.retry,
            });
            if (!fetch_1.isRedirect(response.status) || redirects >= MAX_FOLLOWED_REDIRECTS) {
                return response;
            }
            // This is a workaround to remove authorization headers on redirect.
            // Related pnpm issue: https://github.com/pnpm/pnpm/issues/1815
            redirects++;
            urlObject = new url_1.URL(response.headers.get('location'));
            if (!headers['authorization'] || originalHost === urlObject.host)
                continue;
            delete headers['authorization'];
        }
    };
}
exports.default = default_1;
function getHeaders(opts) {
    const headers = {
        accept: opts.fullMetadata === true ? JSON_DOC : CORGI_DOC,
    };
    if (opts.auth) {
        headers['authorization'] = opts.auth; // eslint-disable-line
    }
    if (opts.userAgent) {
        headers['user-agent'] = opts.userAgent;
    }
    return headers;
}
//# sourceMappingURL=fetchFromRegistry.js.map