"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dp = require("dependency-path");
const get_npm_tarball_url_1 = require("get-npm-tarball-url");
const url = require("url");
const nameVerFromPkgSnapshot_1 = require("./nameVerFromPkgSnapshot");
exports.default = (depPath, pkgSnapshot, registries) => {
    var _a;
    // tslint:disable:no-string-literal
    if (pkgSnapshot.resolution['type'] || ((_a = pkgSnapshot.resolution['tarball']) === null || _a === void 0 ? void 0 : _a.startsWith('file:'))) {
        return pkgSnapshot.resolution;
    }
    const { name } = nameVerFromPkgSnapshot_1.default(depPath, pkgSnapshot);
    const registry = pkgSnapshot.resolution['registry']
        || (name[0] === '@' && registries[name.split('/')[0]])
        || registries.default;
    let tarball;
    if (!pkgSnapshot.resolution['tarball']) {
        tarball = getTarball(registry);
    }
    else {
        tarball = url.resolve(registry, pkgSnapshot.resolution['tarball']);
    }
    return {
        ...pkgSnapshot.resolution,
        registry,
        tarball,
    };
    function getTarball(registry) {
        const { name, version } = dp.parse(depPath);
        if (!name || !version) {
            throw new Error(`Couldn't get tarball URL from dependency path ${depPath}`);
        }
        return get_npm_tarball_url_1.default(name, version, { registry });
    }
    // tslint:enable:no-string-literal
};
//# sourceMappingURL=pkgSnapshotToResolution.js.map