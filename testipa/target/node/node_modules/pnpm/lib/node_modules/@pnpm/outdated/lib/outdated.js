"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("@pnpm/constants");
const error_1 = __importDefault(require("@pnpm/error"));
const lockfile_file_1 = require("@pnpm/lockfile-file");
const lockfile_utils_1 = require("@pnpm/lockfile-utils");
const manifest_utils_1 = require("@pnpm/manifest-utils");
const types_1 = require("@pnpm/types");
const dp = __importStar(require("dependency-path"));
const semver = require("semver");
__exportStar(require("./createManifestGetter"), exports);
async function outdated(opts) {
    var _a;
    if (packageHasNoDeps(opts.manifest))
        return [];
    if (!opts.wantedLockfile) {
        throw new error_1.default('OUTDATED_NO_LOCKFILE', 'No lockfile in this directory. Run `pnpm install` to generate one.');
    }
    const allDeps = manifest_utils_1.getAllDependenciesFromManifest(opts.manifest);
    const importerId = lockfile_file_1.getLockfileImporterId(opts.lockfileDir, opts.prefix);
    const currentLockfile = (_a = opts.currentLockfile) !== null && _a !== void 0 ? _a : { importers: { [importerId]: {} } };
    const outdated = [];
    await Promise.all(types_1.DEPENDENCIES_FIELDS.map(async (depType) => {
        var _a;
        if (((_a = opts.include) === null || _a === void 0 ? void 0 : _a[depType]) === false ||
            !opts.wantedLockfile.importers[importerId][depType])
            return;
        let pkgs = Object.keys(opts.wantedLockfile.importers[importerId][depType]);
        if (opts.match) {
            pkgs = pkgs.filter((pkgName) => opts.match(pkgName));
        }
        await Promise.all(pkgs.map(async (alias) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const ref = opts.wantedLockfile.importers[importerId][depType][alias];
            // ignoring linked packages. (For backward compatibility)
            if (ref.startsWith('file:')) {
                return;
            }
            const relativeDepPath = dp.refToRelative(ref, alias);
            // ignoring linked packages
            if (relativeDepPath === null)
                return;
            const pkgSnapshot = (_a = opts.wantedLockfile.packages) === null || _a === void 0 ? void 0 : _a[relativeDepPath];
            if (!pkgSnapshot) {
                throw new Error(`Invalid ${constants_1.WANTED_LOCKFILE} file. ${relativeDepPath} not found in packages field`);
            }
            const currentRef = (_c = (_b = currentLockfile.importers[importerId]) === null || _b === void 0 ? void 0 : _b[depType]) === null || _c === void 0 ? void 0 : _c[alias];
            const currentRelative = currentRef && dp.refToRelative(currentRef, alias);
            const current = (_d = (currentRelative && dp.parse(currentRelative).version)) !== null && _d !== void 0 ? _d : currentRef;
            const wanted = (_e = dp.parse(relativeDepPath).version) !== null && _e !== void 0 ? _e : ref;
            const { name: packageName } = lockfile_utils_1.nameVerFromPkgSnapshot(relativeDepPath, pkgSnapshot);
            // It might be not the best solution to check for pkgSnapshot.name
            // TODO: add some other field to distinct packages not from the registry
            if (pkgSnapshot.resolution && (pkgSnapshot.resolution['type'] || pkgSnapshot.name)) { // eslint-disable-line @typescript-eslint/dot-notation
                if (current !== wanted) {
                    outdated.push({
                        alias,
                        belongsTo: depType,
                        current,
                        latestManifest: undefined,
                        packageName,
                        wanted,
                    });
                }
                return;
            }
            const name = (_f = dp.parse(relativeDepPath).name) !== null && _f !== void 0 ? _f : packageName;
            const latestManifest = await opts.getLatestManifest(name, opts.compatible ? ((_g = allDeps[name]) !== null && _g !== void 0 ? _g : 'latest') : 'latest');
            if (!latestManifest)
                return;
            if (!current) {
                outdated.push({
                    alias,
                    belongsTo: depType,
                    latestManifest,
                    packageName,
                    wanted,
                });
                return;
            }
            if (current !== wanted || semver.lt(current, latestManifest.version) || latestManifest.deprecated) {
                outdated.push({
                    alias,
                    belongsTo: depType,
                    current,
                    latestManifest,
                    packageName,
                    wanted,
                });
            }
        }));
    }));
    return outdated.sort((pkg1, pkg2) => pkg1.packageName.localeCompare(pkg2.packageName));
}
exports.default = outdated;
function packageHasNoDeps(manifest) {
    return (!manifest.dependencies || isEmpty(manifest.dependencies)) &&
        (!manifest.devDependencies || isEmpty(manifest.devDependencies)) &&
        (!manifest.optionalDependencies || isEmpty(manifest.optionalDependencies));
}
function isEmpty(obj) {
    return Object.keys(obj).length === 0;
}
//# sourceMappingURL=outdated.js.map