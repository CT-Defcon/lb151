"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const manifest_utils_1 = require("@pnpm/manifest-utils");
const guessPinnedVersionFromExistingSpec_1 = __importDefault(require("../guessPinnedVersionFromExistingSpec"));
function getWantedDependencies(pkg, opts) {
    var _a, _b, _c, _d;
    const depsToInstall = manifest_utils_1.filterDependenciesByType(pkg, (_a = opts === null || opts === void 0 ? void 0 : opts.includeDirect) !== null && _a !== void 0 ? _a : {
        dependencies: true,
        devDependencies: true,
        optionalDependencies: true,
    });
    return getWantedDependenciesFromGivenSet(depsToInstall, {
        dependencies: (_b = pkg.dependencies) !== null && _b !== void 0 ? _b : {},
        devDependencies: (_c = pkg.devDependencies) !== null && _c !== void 0 ? _c : {},
        optionalDependencies: (_d = pkg.optionalDependencies) !== null && _d !== void 0 ? _d : {},
        updatePref: (opts === null || opts === void 0 ? void 0 : opts.updateWorkspaceDependencies) === true
            ? updateWorkspacePref
            : (pref) => pref,
    });
}
exports.default = getWantedDependencies;
function updateWorkspacePref(pref) {
    return pref.startsWith('workspace:') ? 'workspace:*' : pref;
}
function getWantedDependenciesFromGivenSet(deps, opts) {
    if (!deps)
        return [];
    return Object.keys(deps).map((alias) => {
        const pref = opts.updatePref(deps[alias]);
        let depType;
        if (opts.optionalDependencies[alias] != null)
            depType = 'optional';
        else if (opts.dependencies[alias] != null)
            depType = 'prod';
        else if (opts.devDependencies[alias] != null)
            depType = 'dev';
        return {
            alias,
            dev: depType === 'dev',
            optional: depType === 'optional',
            pinnedVersion: guessPinnedVersionFromExistingSpec_1.default(deps[alias]),
            pref,
            raw: `${alias}@${pref}`,
        };
    });
}
//# sourceMappingURL=getWantedDependencies.js.map